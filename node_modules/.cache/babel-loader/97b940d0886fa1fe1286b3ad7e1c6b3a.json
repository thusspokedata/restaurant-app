{"ast":null,"code":"var _jsxFileName = \"/Users/kilo/Ironhack-web-dev-final-project/client/src/context/auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const storeToken = token => {\n    // store this token in local storage\n    localStorage.setItem(\"authToken\", token);\n  };\n\n  const verifyStoredToken = () => {\n    // check if we have a token in local storage\n    const storedToken = localStorage.getItem(\"authToken\");\n\n    if (storedToken) {\n      // if yes -> send it to the server to verify\n      return axios.get(\"/api/resto/verify\", {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        // after verification set the user and set isLoggedIn\n        const user = response.data;\n        setUser(user);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n      }).catch(err => {\n        // the token is invalid\n        setUser(null);\n        setIsLoggedIn(false);\n        setIsLoading(false);\n      });\n    } else {\n      // there is no token in local storage\n      setIsLoading(false);\n    }\n  };\n\n  const logoutUser = () => {\n    // remove the token from local storage\n    localStorage.removeItem(\"authToken\"); // update the state\n\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n\n  useEffect(() => {\n    verifyStoredToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      user,\n      isLoading,\n      storeToken,\n      verifyStoredToken,\n      logoutUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProviderWrapper, \"V0/DdkTaUnPNu14Tc5DaW2P9YMw=\");\n\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"names":["React","useEffect","useState","axios","AuthContext","createContext","AuthProviderWrapper","props","user","setUser","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","storeToken","token","localStorage","setItem","verifyStoredToken","storedToken","getItem","get","headers","Authorization","then","response","data","catch","err","logoutUser","removeItem","children"],"sources":["/Users/kilo/Ironhack-web-dev-final-project/client/src/context/auth.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const storeToken = (token) => {\n    // store this token in local storage\n    localStorage.setItem(\"authToken\", token);\n  };\n\n  const verifyStoredToken = () => {\n    // check if we have a token in local storage\n    const storedToken = localStorage.getItem(\"authToken\");\n    if (storedToken) {\n      // if yes -> send it to the server to verify\n      return axios\n        .get(\"/api/resto/verify\", {\n          headers: { Authorization: `Bearer ${storedToken}` },\n        })\n        .then((response) => {\n          // after verification set the user and set isLoggedIn\n          const user = response.data;\n          setUser(user);\n          setIsLoggedIn(true);\n          setIsLoading(false);\n        })\n        .catch((err) => {\n          // the token is invalid\n          setUser(null);\n          setIsLoggedIn(false);\n          setIsLoading(false);\n        });\n    } else {\n      // there is no token in local storage\n      setIsLoading(false);\n    }\n  };\n\n  const logoutUser = () => {\n    // remove the token from local storage\n    localStorage.removeItem(\"authToken\");\n    // update the state\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n\n  useEffect(() => {\n    verifyStoredToken();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn,\n        user,\n        isLoading,\n        storeToken,\n        verifyStoredToken,\n        logoutUser,\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthProviderWrapper, AuthContext };\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;EAAA;;EAClC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;;EAEA,MAAMY,UAAU,GAAIC,KAAD,IAAW;IAC5B;IACAC,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,KAAlC;EACD,CAHD;;EAKA,MAAMG,iBAAiB,GAAG,MAAM;IAC9B;IACA,MAAMC,WAAW,GAAGH,YAAY,CAACI,OAAb,CAAqB,WAArB,CAApB;;IACA,IAAID,WAAJ,EAAiB;MACf;MACA,OAAOhB,KAAK,CACTkB,GADI,CACA,mBADA,EACqB;QACxBC,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASJ,WAAY;QAAvC;MADe,CADrB,EAIJK,IAJI,CAIEC,QAAD,IAAc;QAClB;QACA,MAAMjB,IAAI,GAAGiB,QAAQ,CAACC,IAAtB;QACAjB,OAAO,CAACD,IAAD,CAAP;QACAG,aAAa,CAAC,IAAD,CAAb;QACAE,YAAY,CAAC,KAAD,CAAZ;MACD,CAVI,EAWJc,KAXI,CAWGC,GAAD,IAAS;QACd;QACAnB,OAAO,CAAC,IAAD,CAAP;QACAE,aAAa,CAAC,KAAD,CAAb;QACAE,YAAY,CAAC,KAAD,CAAZ;MACD,CAhBI,CAAP;IAiBD,CAnBD,MAmBO;MACL;MACAA,YAAY,CAAC,KAAD,CAAZ;IACD;EACF,CA1BD;;EA4BA,MAAMgB,UAAU,GAAG,MAAM;IACvB;IACAb,YAAY,CAACc,UAAb,CAAwB,WAAxB,EAFuB,CAGvB;;IACArB,OAAO,CAAC,IAAD,CAAP;IACAE,aAAa,CAAC,KAAD,CAAb;EACD,CAND;;EAQAV,SAAS,CAAC,MAAM;IACdiB,iBAAiB;EAClB,CAFQ,EAEN,EAFM,CAAT;EAIA,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACLR,UADK;MAELF,IAFK;MAGLI,SAHK;MAILE,UAJK;MAKLI,iBALK;MAMLW;IANK,CADT;IAAA,UAUGtB,KAAK,CAACwB;EAVT;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GAhEQzB,mB;;KAAAA,mB;AAkET,SAASA,mBAAT,EAA8BF,WAA9B"},"metadata":{},"sourceType":"module"}